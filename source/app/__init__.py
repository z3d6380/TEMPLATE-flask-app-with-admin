# IMPORTS
from dotenv import load_dotenv
from flask import Flask, render_template, request
from playhouse.shortcuts import model_to_dict
import re
from .database import *
from .smtp import *

# APP INITIALIZATION
load_dotenv()
app = Flask(__name__)

# REGULAR EXPRESSIONS
email_re = re.compile(r"([-!#-'*+/-9=?A-Z^-~]+(\.[-!#-'*+/-9=?A-Z^-~]+)*|\"([]!#-[^-~ \t]|(\\[\t -~]))+\")@([-!#-'*+/-9=?A-Z^-~]+(\.[-!#-'*+/-9=?A-Z^-~]+)*|\[[\t -Z^-~]*])")


# APP HOOKS
db = database.db

# This hook ensures that a connection is opened to handle any queries
# generated by the request.
@app.before_request
def _db_connect():
    db.connect()

# This hook ensures that the connection is closed when we've finished
# processing the request.
@app.teardown_request
def _db_close(exc):
    if not db.is_closed():
        db.close()

# APP ROUTES
@app.route('/')
def index():
    return render_template("index.html")

@app.route('/about')
def about():
    return render_template("about.html")

@app.route('/contact', methods=["GET", "POST"])
def contact():
    if request.method == "GET": 
        return render_template("contact.html")
    elif request.method == "POST":
        firstname = request.form.get("firstname")
        lastname = request.form.get("lastname")
        email = request.form.get("email")

        if not firstname or not lastname or not email:
            error_statement = "All form fields required..."
            return render_template("contact.html", error_statement=error_statement, firstname=firstname, lastname=lastname, email=email)
        elif not re.fullmatch(email_re, email):
            error_statement = "Email format invalid..."
            return render_template("contact.html", error_statement=error_statement, firstname=firstname, lastname=lastname, email=email)
        else:
            success_statement = "Thank you! We will be in contact with you shortly..."
            # Send Contact Received Email
            smtp.ContactMessage(firstname, email)
            # Create database entry of contact
            Contact.create(firstname=firstname, lastname=lastname, email=email)
            return render_template("contact.html", success_statement=success_statement, firstname=firstname, lastname=lastname, email=email)
    else:
        error_statement = "Bad request..."
        return render_template("contact.html", error_statement=error_statement, firstname=firstname, lastname=lastname, email=email)
